//
//  Spherical.swift
//  VidEngine
//
//  Created by David Gavilan on 8/21/16.
//  Copyright Â© 2016 David Gavilan. All rights reserved.
//

import simd

public struct Spherical {
    /// Radial distance
    public let r: Float
    /// Inclination (theta) {0,Ï€}
    public let Î¸: Float
    /// Azimuth (phi) {0,2Ï€}
    public let Ï†: Float
    
    // Maybe I'll hate myself later for using symbols ðŸ˜‚
    // (they aren't difficult to type with Japanese input, type ã‚·ãƒ¼ã‚¿ and ãƒ•ã‚¡ã‚¤)
    public init (r: Float, Î¸: Float, Ï†: Float) {
        self.r = r
        self.Î¸ = Î¸
        self.Ï† = Ï†
    }
    
    /// Converts from Cartesian to Spherical coordinates
    public init (v: simd_float3) {
        r = length(v)
        Î¸ = acosf(v.y / r)
        // convert -pi..pi to 0..2pi
        let phi = atan2f(v.x, v.z)
        Ï† = phi < 0 ? PI2 + phi : phi
    }
    
    public init () {
        r = 1
        Î¸ = 0
        Ï† = 0
    }
    
    public func toCartesian() -> simd_float3 {
        return r * simd_float3(sinf(Î¸) * sinf(Ï†), cosf(Î¸), sinf(Î¸) * cos(Ï†))
    }
    
    public static func randomSample() -> Spherical {
        let x = Double(Randf())
        let y = Double(Randf())
        let Î¸ = 2.0 * acos(sqrt(1.0 - x))
        let Ï† = 2.0 * Ï€ * y
        let sph = Spherical(r: 1.0, Î¸: Float(Î¸), Ï†: Float(Ï†))
        return sph
    }
}
