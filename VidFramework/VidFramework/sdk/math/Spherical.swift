//
//  Spherical.swift
//  VidEngine
//
//  Created by David Gavilan on 8/21/16.
//  Copyright Â© 2016 David Gavilan. All rights reserved.
//

import simd

public class Spherical {
    public var r       : Float = 1     ///< Radial distance
    public var Î¸       : Float = 0     ///< Inclination (theta) {0,Ï€}
    public var Ï†       : Float = 0     ///< Azimuth (phi) {0,2Ï€}

    // Maybe I'll hate myself later for using symbols ðŸ˜‚
    // (they aren't difficult to type with Japanese input, type ã‚·ãƒ¼ã‚¿ and ãƒ•ã‚¡ã‚¤)
    public init (r: Float, Î¸: Float, Ï†: Float) {
        self.r = r
        self.Î¸ = Î¸
        self.Ï† = Ï†
    }

    /// Converts from Cartesian to Spherical coordinates
    public init (v: float3) {
        r = length(v)
        Î¸ = acosf(v.y / r)
        // convert -pi..pi to 0..2pi
        Ï† = atan2f(v.x, v.z)
        Ï† = Ï† < 0 ? PI2 + Ï† : Ï†
    }

    public init () {
    }

    public func toCartesian() -> float3 {
        return float3(r * sinf(Î¸) * sinf(Ï†), r * cosf(Î¸), r * sinf(Î¸) * cos(Ï†))
    }

    public static func randomSample() -> Spherical {
        let x = Double(Randf())
        let y = Double(Randf())
        let Î¸ = 2.0 * acos(sqrt(1.0 - x))
        let Ï† = 2.0 * Ï€ * y
        let sph = Spherical(r: 1.0, Î¸: Float(Î¸), Ï†: Float(Ï†))
        return sph
    }
}
